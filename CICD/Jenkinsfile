pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_URL = "${params.harbor_url}"
        HARBOR_CREDENTIAL = "${params.harbor_credential}"
        GIT_USER_EMAIL = "${params.git_user_email}"
        GIT_CREDENTIAL = "${params.github_credential}"
    }

    tools {
        nodejs 'NodeJS-21.4.0' // Jenkins에서 구성한 Node.js 도구 이름 사용
    }

    stages {        

        stage('Install Dependencies') {
            steps {
                script {
                    // Jenkins의 캐시 디렉토리 지정
                    def npmCacheDir = "${JENKINS_HOME}/npm-cache"

                    // 캐시 디렉토리가 없으면 생성
                    sh "mkdir -p ${npmCacheDir}"

                    // npm 캐시 설정 및 ci 실행
                    sh """
                        npm config set cache "${npmCacheDir}"
                    
                        if [ ! -f package-lock.json ]; then
                            echo "package-lock.json not found. Running npm install to generate it."
                            npm install --prefer-offline --no-audit --maxsockets 50
                        else
                            echo "package-lock.json found. Running npm ci."
                            npm ci --prefer-offline --no-audit --maxsockets 50    
                        fi
                    """
                }
            }
        }

        stage('Build Project') {
            steps {
                // 프로젝트 빌드
                sh 'npm run build'
            }
        }
        // 젠킨스의 빌드 결과물이 dist 디렉토리에 생성됌.

        stage('Build Image for mannazo-front-react') {
          steps {
               script {
                    // build 된 결과물을 ./docker_build로 복사
                    sh "mkdir -p docker_build"
                    sh "cp -r $WORKSPACE/dist ./docker_build"  

                    // nginx.conf 파일 복사
                    sh "cp CICD/nginx.conf ./docker_build/nginx.conf"

                    docker.withRegistry("http://${DOCKER_REGISTRY_URL}", "${HARBOR_CREDENTIAL}") {
                        def customImage = docker.build("mannazo/front-react:${env.BUILD_NUMBER}", "-f CICD/Dockerfile ./docker_build")
                        customImage.push()
                 }
                }
            }
        }
        
        stage('Update Manifests for mannazo-deploy') {
            steps {
                script { 
                    // Git repository information for manifests
                    def manifestsRepoUrl = 'https://github.com/mannazo/mannazo-deploy.git'
                    def manifestsRepoBranch = 'main'
                    
                    // Checkout manifests repository
                    git credentialsId: "${HARBOR_CREDENTIAL}", url: manifestsRepoUrl, branch: manifestsRepoBranch
                    sh """
                        git pull origin main
                        sed -i 's|harbor.dorong9.com/mannazo/front-react:.*|harbor.dorong9.com/mannazo/front-react:${env.BUILD_NUMBER}|' web/mannazu-web.yaml
                        git add web/mannazu-web.yaml
                        git config user.name 'DOLONG9' 
                        git config user.email "${GIT_USER_EMAIL}"
                        git commit -m 'web/mannazu-web.yaml ${currentBuild.number} image versioning'
                    """
                    withCredentials([gitUsernamePassword(credentialsId: "${GIT_CREDENTIAL}")]) {
                       sh "git remote set-url origin https://github.com/mannazo/mannazo-deploy.git" 
                       sh "git push origin main"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            script {
                // 빌드 결과물 및 임시 파일 삭제
                sh '''
                    rm -rf dist docker_build
                    find . -name "*.log" -type f -delete
                    find . -name "*.tmp" -type f -delete
                '''

                // node_modules는 유지
                // 캐시된 npm 패키지는 JENKINS_HOME/npm-cache에 저장되므로 삭제하지 않음
            }
        }
    }
}